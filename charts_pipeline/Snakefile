#
from os.path import join

configfile: 'config.json'

# Set this flag to true to re-write the entire
# database from scratch. Otherwise, it will only
# process tumors that have yet to be processed.
REWRITE = False

rule all:
    input:
        join(config['log_dir'], 'cluster_res_0_5_log.txt'),
        join(config['log_dir'], 'cluster_res_1_log.txt'),
        join(config['log_dir'], 'cluster_res_2_log.txt'),
        join(config['log_dir'], 'dim_reduc_log.txt'),
        join(config['log_dir'], 'cell_type_res_0_5_log.txt'),
        join(config['log_dir'], 'cell_type_res_1_log.txt'),
        join(config['log_dir'], 'cell_type_res_2_log.txt'),
        join(config['log_dir'], 'gsva_cancersea_res_0_5_log.txt'),
        join(config['log_dir'], 'gsva_cancersea_res_1_log.txt'),
        join(config['log_dir'], 'gsva_cancersea_res_2_log.txt'),
        join(config['log_dir'], 'gsva_hallmark_0_5_log.txt'),
        join(config['log_dir'], 'gsva_hallmark_1_log.txt'),
        join(config['log_dir'], 'gsva_hallmark_2_log.txt'),
        join(config['log_dir'], 'malignant_classification_log.txt'),
        join(config['log_dir'], 'de_res_0_5_log.txt'),
        join(config['log_dir'], 'de_res_1_log.txt'),
        join(config['log_dir'], 'de_res_2_log.txt')       

def _cluster_cmd():
    if REWRITE:
        return 'python cluster.py -w -r {res} {{input}} | tee {{output}}'
    else:
        return 'python cluster.py -r {res} {{input}} | tee {{output}}'

rule cluster_res_0_5:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'cluster_res_0_5_log.txt')
    run:
        cmd= _cluster_cmd().format(res=0.5)
        shell(cmd)

rule cluster_res_1:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'cluster_res_1_log.txt')
    run:
        cmd= _cluster_cmd().format(res=1.0)
        shell(cmd)

rule cluster_res_2:
    input:
        joint(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'cluster_res_2_log.txt')
    run:
        cmd= _cluster_cmd().format(res=2.0)
        shell(cmd)

###############################################################################
#   Dimension reduction
###############################################################################

def _dim_reduc_cmd():
    if REWRITE:
        return 'python dim_reduc_per_tumor.py -w {input} | tee {output}'
    else:
        return 'python dim_reduc_per_tumor.py {input} | tee {output}'

rule dim_reduc:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'dim_reduc_log.txt')
    run:
        cmd=_dim_reduc_cmd()
        shell(cmd)

###############################################################################
#   Cell type classification
###############################################################################

def _cell_type_cmd():
    if REWRITE:
        return 'python cell_type_classification.py -r {res} -w {{input}} {tmp}/cello_models {tum_params} | tee {{output}}'
    else:
        return 'python cell_type_classification.py -r {res} {{input}} {tmp}/cello_models {tum_params} | tee {{output}}'


rule cell_type_res_0_5:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'cell_type_res_0_5_log.txt')
    run:
        cmd=_cell_type_cmd().format(
            res='0.5',
            tmp=config['tmp_dir'],
            tum_params=config['tumor_parameters']
        )
        shell(cmd)


rule cell_type_res_1:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'],'cell_type_res_1_log.txt')
    run:
        cmd=_cell_type_cmd().format(
            res='1',
            tmp=config['tmp_dir'],
            tum_params=config['tumor_parameters']
        )
        shell(cmd)


rule cell_type_res_2:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'cell_type_res_2_log.txt')
    run:
        cmd=_cell_type_cmd().format(
            res='2',
            tmp=config['tmp_dir'],
            tum_params=config['tumor_parameters']
        )
        shell(cmd)

#########################################################################
#   GSVA on CancerSEA gene sets
#########################################################################

def _gsva_cancersea_cmd():
    if REWRITE:
        return 'python gsva.py -r {res} -w {{input}} {db_loc}/gene_sets/CancerSEA.gmt cancersea | tee {{output}}'
    else:
        return 'python gsva.py -r {res} {{input}} {db_loc}/gene_sets/CancerSEA.gmt cancersea | tee {{output}}'

rule gsva_cancersea_res_0_5:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'gsva_cancersea_res_0_5_log.txt')
    run:
        cmd=_gsva_cancersea_cmd().format(
            res='0.5',
            db_loc=config['db_loc']
        )
        shell("echo '{}'".format(cmd))
        shell(cmd)

rule gsva_cancersea_res_1:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'gsva_cancersea_res_1_log.txt')
    run:
        cmd=_gsva_cancersea_cmd().format(
            res='1',
            db_loc=config['db_loc']
        )
        shell("echo '{}'".format(cmd))
        shell(cmd)

rule gsva_cancersea_res_2:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'gsva_cancersea_res_2_log.txt')
    run:
        cmd=_gsva_cancersea_cmd().format(
            res='2',
            db_loc=config['db_loc']
        )
        shell("echo '{}'".format(cmd))
        shell(cmd)

########################################################################################
#   GSVA on Hallmark gene sets
########################################################################################

def _gsva_hallmark_cmd():
    if REWRITE:
        return 'python gsva.py -r {res} -w {{input}} {db_loc}/gene_sets/h.all.v7.1.symbols.gmt hallmark | tee {{output}}'
    else:
        return 'python gsva.py -r {res} {{input}} {db_loc}/gene_sets/h.all.v7.1.symbols.gmt hallmark | tee {{output}}'

rule gsva_hallmark_res_0_5:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'gsva_hallmark_0_5_log.txt')
    run:
        cmd=_gsva_hallmark_cmd().format(
            res='0.5',
            db_loc=config['db_loc']
        )
        shell(cmd)

rule gsva_hallmark_res_1:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'gsva_hallmark_1_log.txt')
    run:
        cmd=_gsva_hallmark_cmd().format(
            res='1',
            db_loc=config['db_loc']
        )
        shell(cmd)

rule gsva_hallmark_res_2:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'gsva_hallmark_2_log.txt')
    run:
        cmd=_gsva_hallmark_cmd().format(
            res='2',
            db_loc=config['db_loc']
        )
        shell(cmd)

############################################################
#   Classify malignant cells
############################################################

def _get_study_to_tumors():
    import json
    with open(config['tumor_parameters'], 'r') as f:
        j = json.load(f)
        return j['study_to_tumors']

def _malig_score_cmd():
    if REWRITE:
        return 'python classify_malignant.py -w -l {log} {{input}} {tumors} {study} | tee {{output}}'
    else:
        return 'python classify_malignant.py -l {log} {{input}} {tumors} {study} | tee {{output}}'

rule classify_malignant:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'malignant_classification_log.txt')
    run:
        cmds = [
             _malig_score_cmd().format(
                study=study, 
                tumors=','.join(tumors),
                log= config['log_dir']
            )
            for study, tumors in _get_study_to_tumors().items()
        ]
        for c in cmds:
            shell('echo "{}"'.format(c))
            shell(c)

###############################################################
#   Differential expression
###############################################################

rule diff_expr_res_0_5:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'de_res_0_5_log.txt')
    run:
        cmds = [
            'python de.py -w -r 0.5 {input} | tee {output}'
        ]
        for c in cmds:
            shell("echo '{}'".format(c))
            shell(c)

rule diff_expr_res_1:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'de_res_1_log.txt')
    run:
        cmds = [
            'python de.py -w -r 1 {input} | tee {output}'
        ]
        for c in cmds:
            shell("echo '{}'".format(c))
            shell(c)

rule diff_expr_res_2:
    input:
        join(config['db_loc'], 'charts.h5')
    output:
        join(config['log_dir'], 'de_res_2_log.txt')
    run:
        cmds = [
            'python de.py -w -r 2 {input} | tee {output}'
        ]
        for c in cmds:
            shell("echo '{}'".format(c))
            shell(c)



